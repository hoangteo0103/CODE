#include<bits/stdc++.h>
using namespace std;
#define fi first
#define se second
#define ll long long
typedef pair<ll ,ll >  ii;
#define iii pair<ll  ,ii >
priority_queue< iii,vector<iii> ,greater<iii> > edges;
int test,n,k,par[2005];
bool ok[2005][2005];
ll f[2005],ans=0,c[2005][2005],dist[2005][2005];
void In()
{
    while(edges.size()) edges.pop();
    cin>>n>>k;
    ans=0;
    for(int i=1;i<=n;i++)
        cin>>f[i],ans+=f[i];
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
    {
        cin>>c[i][j];
        ok[i][j]=true;
        if(i<j)
        {
            dist[i][j]=dist[j][i]=c[i][j]-max(f[i],f[j]);
            int x=i,y=j;
            if(f[i]>f[j]) swap(x,y);
            edges.push({dist[i][j],{x,y}});
        }
    }
    for(int i=1;i<=n;i++) par[i]=-1;
    for(int i=1;i<=n;i++)
        ok[i][i]=false;
}
int root(int x)
{
    return par[x]<0 ? x:par[x]=root(par[x]);
}
void Solve()
{
    int num =1;
    while(edges.size()>0)
    {
        ll w=edges.top().fi;
        int u=edges.top().se.fi,v=edges.top().se.se;
        edges.pop();
        if(num>n-k&&w>=0) break;
        if(root(u)!=u ||root(v)!=v) continue;
        num++;
        ans+=w;
        ok[u][v]=ok[v][u]=false;
        par[u]+=par[v];
        par[v]=u;
        for(int z=1;z<=n;z++)
            if(ok[z][v])
        {
            ok[z][v]=ok[v][z]=false;
            if(dist[u][z]>c[v][z]-max(f[u],f[z]))
            {
                c[u][z]=c[z][u]=c[v][z];
                dist[u][z]=dist[z][u]=c[u][z]-max(f[u],f[z]);
                int x=u,y=z;
                if(f[x]>f[y]) swap(x,y);
                edges.push({dist[u][z],{x,y}});
            }
        }
    }
    cout<<ans<<'\n';
}
int main()
{   
    ios::sync_with_stdio(false);
    cin>>test;
    for(int tt=1;tt<=test;tt++)
    {
        In();
        Solve();
    }
}
